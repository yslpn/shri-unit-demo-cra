name: Release process
on:
  push:
    tags:
      - "v*"
jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      issue_number: ${{ steps.create_issue.outputs.number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install auto-changelog
        run: npm i -g auto-changelog
      - name: Generate changelog
        run: auto-changelog --commit-limit false --template keepachangelog
      - name: Create Issue
        id: create_issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const description = fs.readFileSync('CHANGELOG.md', 'utf8');
            const [owner, repo] = '${{ github.repository }}'.split('/');
            const version = '${{ github.ref }}'.replace('refs/tags/', '');
            const title = `Release ${version} by ${{ github.actor }}`;
            const issue = { owner, repo, labels: ['RELEASE'] };
            const issues = await github.rest.issues.listForRepo({ ...issue, state: 'all' });
            const existingIssue = issues.data.find(i => i.title === title);

            if (existingIssue) {
              const update = { ...issue, issue_number: existingIssue.number, body: description, state: 'open' };
              await github.rest.issues.update(update);
              return { number: existingIssue.number };
            } else {
              const create = { ...issue, title: title, body: description };
              const response = await github.rest.issues.create(create);
              return { number: response.data.number };
            }
      - name: Check if branch exists
        id: checkbranch
        run: |
          BRANCH_EXIST=$(git ls-remote --heads origin "${{ github.ref }}" | wc -l)
          echo "::set-output name=exists::$BRANCH_EXIST"
      - name: Create or update branch
        run: |
          if [ "${{ steps.checkbranch.outputs.exists }}" -eq "0" ]; then
            git checkout -b "${{ github.ref }}"
            git push origin "${{ github.ref }}"
          else
            git checkout "${{ github.ref }}"
            git pull origin master
            git push origin "${{ github.ref }}"
          fi
      - name: Create or Update Pull Request
        id: create_or_update_pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const prBody = fs.readFileSync('CHANGELOG.md', 'utf8');
            const [owner, repo] = '${{ github.repository }}'.split('/');
            const base = 'stable';
            const head = '${{ github.ref }}';
            const issue_number = ${{ steps.create_issue.outputs.number }};
            const title = `Release ${head.replace('refs/tags/', '')} by ${{ github.actor }}`;
            const pr = { owner, repo, base, head, body: prBody, title };

            const pulls = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${head}` });
            const existingPr = pulls.data.find(p => p.title === title);

            if (existingPr) {
              const update = { owner, repo, pull_number: existingPr.number, body: prBody };
              const response = await github.rest.pulls.update(update);
            } else {
              const create = { pr };
              const response = await github.rest.pulls.create(create);
            }
